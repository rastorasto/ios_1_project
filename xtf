#!/bin/bash
# xuhliar00
# 29.02.2024
export POSIXLY_CORRECT=yes
export LC_ALL=C

DATE_AFTER=""
DATE_BEFORE=""
CURRENCY=""
COMMAND=""
USER=""
LOGS=()

# Prints help information about the script and usage
help(){
    echo "xtf - skript pro předzpracování logů z Vaší kryptoměnové burzy."
    echo "POUŽITÍ"
    echo "xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]]"
    echo "VOLBY"
    echo "PŘÍKAZ může být jeden z:"
    echo "list – výpis záznamů pro daného uživatele."
    echo "list-currency – výpis seřazeného seznamu vyskytujících se měn."
    echo "status – výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn."
    echo "profit – výpis stavu účtu zákazníka se započítaným fiktivním výnosem."
    echo "FILTR může být kombinace následujících:"
    echo "-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je formátu YYYY-MM-DD HH:MM:SS."
    echo "-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj)."
    echo "-c CURRENCY – jsou uvažovány pouze záznamy odpovídající dané měně."
    echo "-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
}
# Fucion to validate the logs
validate_logs() {
    local logfile="$1" # Store the first argument in the variable logfile
    awk -F ';' '
        {
            # Iterate over the fields of the input line
            for (i = 1; i <= NF; i += 4) {
                # Validate user name
                if (!($i ~ /^[[:print:]]+$/)) {
                    print "Error: Invalid format for user name" $0 > "/dev/stderr"
                    exit 1 
                }
                # Validate date
                if ($(i + 1) !~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) {
                    print "Error: Invalid format for date" $0 > "/dev/stderr"
                    exit 1 
                }
                # Validate currency
                if ($(i + 2) !~ /^[A-Z]{3}$/) {
                    print "Error: Invalid format for currency" $0 > "/dev/stderr"
                    exit 1 
                }
                # Validate amount
                if ($(i + 3) !~ /^(-?[0-9]+(\.[0-9]{4})?)$/) {
                    print "Error: Invalid format for amount" $0 > "/dev/stderr"
                    exit 1 
                }
            }
        }
    ' "$logfile"
}

# Process the command line arguments and options using a while loop
while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help) # If the argument is -h or --help, print the help message and exit
            help 
            exit 0
            ;;
        -a) # If the argument is -a, store the second argument in the variable DATE_AFTER
            if [ -n "$DATE_AFTER" ]; then # If DATE_AFTER is not empty, print an error message and exit
                echo "Error: Duplicate option -a" >&2 
                exit 1
            fi
            DATE_AFTER="$2"
            shift
            ;;
        -b) # If the argument is -b, store the second argument in the variable DATE_BEFORE
            if [ -n "$DATE_BEFORE" ]; then # If DATE_BEFORE is not empty, print an error message and exit
                echo "Error: Duplicate option -b" >&2
                exit 1
            fi
            DATE_BEFORE="$2"
            shift
            ;;
        -c) # If the argument is -c, store the second argument in the variable CURRENCY
            CURRENCY="$2"
            shift
            ;;
        list|list-currency|status|profit) # If the argument is one of the commands, store it in the variable COMMAND
            if [ -n "$COMMAND" ]; then # If COMMAND is not empty, print an error message and exit
                echo "Error: Duplicate command" >&2
                exit 1
            fi
            COMMAND=$1
            ;;
        -*) # If the argument is an unknown option, print an error message and exit
            echo "Error: Unknown option $1"
            help
            exit 1
            ;;
        *) # If the argument is not an option, store it in the variable USER if it is empty, otherwise store it in the array LOGS
            if [ -z "$USER" ]; then
                USER=$1
            else
                LOGS+=("$1")
            fi
            ;;
    esac
    shift
done

# If the command is empty, set the command to list
if [ -z "$COMMAND" ] && [ -n "$USER" ] && [ ${#LOGS[@]} -gt 0 ]; then 
    COMMAND="list"
fi
# If missing user or logs, print an error message and exit
if [ -z "$USER" ] || [ ${#LOGS[@]} -eq 0 ]; then
    echo "Error: Missing required arguments" >&2
    exit 1
fi

for log in "${LOGS[@]}"; do
    if [[ "$log" == *.gz ]]; then
        gzip -d -c "$log" | validate_logs || exit $?
    else
        validate_logs "$log" || exit $?
    fi
done

if [ "$COMMAND" = "list" ]; then
    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" -v currency="$CURRENCY" '
                $1 == user && (currency == "" || $3 == currency)
            '
        else
            awk -F ';' -v user="$USER" -v currency="$CURRENCY" '
                $1 == user && (currency == "" || $3 == currency)
            ' "$log"
        fi
    done
fi

if [ "$COMMAND" = "list-currency" ]; then
    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" '$1 == user {print $3}' | sort -u
        else
            awk -F ';' -v user="$USER" '$1 == user {print $3}' "$log" | sort -u
        fi
    done
fi

if [ "$COMMAND" = "status" ]; then
    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" -v date_after="$DATE_AFTER" -v date_before="$DATE_BEFORE" '
                $1 == user && ($2 >= date_after || date_after == "") && ($2 < date_before || date_before == "") { balance[$3] += $4 }
                END {
                    for (currency in balance) {
                        printf "%s : %.4f\n", currency, balance[currency]
                    }
                }
            '
        else
            awk -F ';' -v user="$USER" -v date_after="$DATE_AFTER" -v date_before="$DATE_BEFORE" '
                $1 == user && ($2 >= date_after || date_after == "") && ($2 < date_before || date_before == "") { balance[$3] += $4 }
                END {
                    for (currency in balance) {
                        printf "%s : %.4f\n", currency, balance[currency]
                    }
                }
            ' "$log"
        fi
    done
fi | sort -t ':' -k 1

if [ "$COMMAND" = "profit" ]; then
    if [ -z "$XTF_PROFIT" ]; then
        PROFIT_PERCENTAGE=20
    else
        PROFIT_PERCENTAGE=$XTF_PROFIT
    fi

    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" -v profit="$PROFIT_PERCENTAGE" '
                BEGIN { PROCINFO["sorted_in"] = "@ind_str_asc" }
                $1 == user { 
                    if ($4 > 0) {
                        $4 *= (1 + profit / 100)
                    }
                    balance[$3] += $4
                }
                END { for (currency in balance) printf "%s : %.4f\n", currency, balance[currency] }
            '
        else
            awk -F ';' -v user="$USER" -v profit="$PROFIT_PERCENTAGE" '
                $1 == user { 
                    if ($4 > 0) {
                        $4 *= (1 + profit / 100)
                    }
                    balance[$3] += $4
                }
                END { for (currency in balance) printf "%s : %.4f\n", currency, balance[currency] }
            ' "$log"
        fi
    done | sort -t ':' -k 1
fi
