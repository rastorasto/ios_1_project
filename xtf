#!/bin/bash
# xuhliar00
# 29.02.2024
export POSIXLY_CORRECT=yes
export LC_ALL=C

DATE_AFTER=""
DATE_BEFORE=""
CURRENCY=""
COMMAND=""
USER=""
LOGS=()

help(){
    echo "xtf - skript pro předzpracování logů z Vaší kryptoměnové burzy."
    echo "POUŽITÍ"
    echo "xtf [-h|--help] [FILTR] [PŘÍKAZ] UŽIVATEL LOG [LOG2 [...]]"
    echo "VOLBY"
    echo "PŘÍKAZ může být jeden z:"
    echo "list – výpis záznamů pro daného uživatele."
    echo "list-currency – výpis seřazeného seznamu vyskytujících se měn."
    echo "status – výpis skutečného stavu účtu seskupeného a seřazeného dle jednotlivých měn."
    echo "profit – výpis stavu účtu zákazníka se započítaným fiktivním výnosem."
    echo "FILTR může být kombinace následujících:"
    echo "-a DATETIME – after: jsou uvažovány pouze záznamy PO tomto datu a čase (bez něj). DATETIME je formátu YYYY-MM-DD HH:MM:SS."
    echo "-b DATETIME – before: jsou uvažovány pouze záznamy PŘED tímto datem a časem (bez něj)."
    echo "-c CURRENCY – jsou uvažovány pouze záznamy odpovídající dané měně."
    echo "-h a --help vypíšou nápovědu s krátkým popisem každého příkazu a přepínače."
}
validate_logs() {
    local logfile="$1"
    awk -F ';' '
        BEGIN {
            RS = "\n"   # Set record separator to newline
        }
        {
            if (NF % 4 != 0) {
                #print "Error invalid format count: " $0
                exit 1 
            }
            for (i = 1; i <= NF; i += 4) {
                # Validate USER NAME
                if (!($i ~ /^[[:print:]]+$/)) {
                    #print "Error invalid format whitespace: " $0
                    exit 1 
                }
                if ($(i + 1) !~ /^[0-9]{4}-[0-9]{2}-[0-9]{2} [0-9]{2}:[0-9]{2}:[0-9]{2}$/) {
                    #print "Error invalid format date: " $0
                    exit 1 
                }
                if ($(i + 2) !~ /^[A-Z]{3}$/) {
                    #print "Error invalid format currency: " $0
                    exit 1 
                }
                if ($(i + 3) !~ /^(-?[0-9]+(\.[0-9]{1,4})?)$/) {
                    #print "Error invalid format amount: " $0
                    exit 1 
                }
            }
        }
    ' "$logfile"
}

while [[ $# -gt 0 ]]; do
    case $1 in
        -h|--help)
            help
            exit 0
            ;;
        -a)
            DATE_AFTER="$2"
            shift
            ;;
        -b)
            DATE_BEFORE="$2"
            shift
            ;;
        -c)
            CURRENCY="$2"
            shift
            ;;
        list|list-currency|status|profit)
            COMMAND=$1
            ;;
        -*)
            echo "Error: Unknown option $1"
            help
            exit 1
            ;;
        *)
            if [ -z "$USER" ]; then
                USER=$1
            else
                LOGS+=("$1")
            fi
            ;;
    esac
    shift
done

if [ -z "$COMMAND" ] && [ -n "$USER" ] && [ ${#LOGS[@]} -gt 0 ]; then
    COMMAND="list"
fi

if [ -z "$COMMAND" ] || [ -z "$USER" ] || [ ${#LOGS[@]} -eq 0 ]; then
    # echo "Error: Missing required arguments"
    # help
    exit 1
fi

for log in "${LOGS[@]}"; do
    if [[ "$log" == *.gz ]]; then
        gzip -d -c "$log" | validate_logs || exit $?
    else
        validate_logs "$log" || exit $?
    fi
done

# echo "Command: $COMMAND"
# echo "Filter: $FILTER"
# echo "Currency: $CURRENCY"
# echo "Date after: $DATE_AFTER"
# echo "Date before: $DATE_BEFORE"
# echo "User: $USER"
# echo "Logs:"
# for log in "${LOGS[@]}"; do 
#     echo "$log"
# done

if [ "$COMMAND" = "list" ]; then
    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" -v currency="$CURRENCY" '
                $1 == user && (currency == "" || $3 == currency)
            '
        else
            awk -F ';' -v user="$USER" -v currency="$CURRENCY" '
                $1 == user && (currency == "" || $3 == currency)
            ' "$log"
        fi
    done
fi

if [ "$COMMAND" = "list-currency" ]; then
    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" '$1 == user {print $3}' | sort -u
        else
            awk -F ';' -v user="$USER" '$1 == user {print $3}' "$log" | sort -u
        fi
    done
fi

if [ "$COMMAND" = "status" ]; then
    for log in "${LOGS[@]}"; do
        if [[ "$log" == *.gz ]]; then
            gzip -d -c "$log" | awk -F ';' -v user="$USER" -v date_after="$DATE_AFTER" -v date_before="$DATE_BEFORE" '
                $1 == user && ($2 >= date_after || date_after == "") && ($2 < date_before || date_before == "") { balance[$3] += $4 }
                END {
                    for (currency in balance) {
                        printf "%s : %.4f\n", currency, balance[currency]
                    }
                }
            '
        else
            awk -F ';' -v user="$USER" -v date_after="$DATE_AFTER" -v date_before="$DATE_BEFORE" '
                $1 == user && ($2 >= date_after || date_after == "") && ($2 < date_before || date_before == "") { balance[$3] += $4 }
                END {
                    for (currency in balance) {
                        printf "%s : %.4f\n", currency, balance[currency]
                    }
                }
            ' "$log"
        fi
    done
fi | sort -t ':' -k 1